package git

import (
	"context"
	"fmt"
	"log/slog"
	"math/rand"
	"os"
	"os/exec"
	"strings"
	"time"
)

// Constants related to Git operations
const (
	maxRetries      = 3
	filename        = "edit.txt"
	dateFormat      = "2006-01-02 15:04:05 -0700"
	shortDateFormat = "2006-01-02"
)

// CommitMessage represents a Git commit message with its weight for random selection
type CommitMessage struct {
	Message string
	Weight  int
}

var commitMessages = []CommitMessage{
	{"[AutoGen] Add a new feature", 10},
	{"[AutoGen] Fix a bug", 8},
	{"[AutoGen] Refactor some code", 6},
	{"[AutoGen] Add a new test", 5},
	{"[AutoGen] Update the requirements", 4},
	{"[AutoGen] Update the documentation", 3},
	{"[AutoGen] Update the README", 3},
	{"[AutoGen] Update the license", 2},
	{"[AutoGen] Update the gitignore", 1},
	{"[AutoGen] Update the CI/CD pipeline", 1},
	{"[AutoGen] Update the Dockerfile", 1},
	{"[AutoGen] Update the Makefile", 1},
	{"[AutoGen] Update the GitHub Actions", 1},
	{"[AutoGen] Update the Jenkinsfile", 1},
	{"[AutoGen] Update the AWS config", 1},
	{"[AutoGen] Update the GCP config", 1},
	{"[AutoGen] Update the Azure config", 1},
}

var weightedCommitMessages []string

// GitOperations encapsulates Git-related functionalities
type GitOperations struct {
	logger *slog.Logger
}

// NewGitOperations creates a new instance of GitOperations
func NewGitOperations(logger *slog.Logger) *GitOperations {
	return &GitOperations{
		logger: logger,
	}
}

// Initialize the weighted commit messages
func init() {
	for _, cm := range commitMessages {
		for i := 0; i < cm.Weight; i++ {
			weightedCommitMessages = append(weightedCommitMessages, cm.Message)
		}
	}
}

// RunCommand executes a command with context and logs its output
func (g *GitOperations) RunCommand(
	ctx context.Context,
	command string,
	args ...string,
) (string, error) {
	if ctx.Err() != nil {
		return "", fmt.Errorf("operation cancelled: %w", ctx.Err())
	}

	g.logger.Info("Running command", "command", command, "args", strings.Join(args, " "))
	cmd := exec.CommandContext(ctx, command, args...)
	output, err := cmd.CombinedOutput()
	if err != nil {
		g.logger.Error("Command failed",
			"command", command,
			"args", args,
			"error", err,
			"output", string(output))
		return "", fmt.Errorf("command failed: %v, output: %s", err, string(output))
	}
	return strings.TrimSpace(string(output)), nil
}

// RetryOperation retries a given operation up to maxRetries times
func (g *GitOperations) RetryOperation(description string, operation func() error) error {
	for i := 0; i < maxRetries; i++ {
		if err := operation(); err != nil {
			g.logger.Warn("Operation failed, retrying",
				"description", description,
				"attempt", i+1,
				"error", err)
			if i < maxRetries-1 {
				time.Sleep(time.Second * time.Duration(i+1))
				continue
			}
			return fmt.Errorf(
				"operation %s failed after %d attempts: %w",
				description,
				maxRetries,
				err,
			)
		}
		return nil
	}
	return fmt.Errorf("operation %s failed after %d attempts", description, maxRetries)
}

// EnsureGitRepository checks if the current directory is a Git repository
func (g *GitOperations) EnsureGitRepository(ctx context.Context) error {
	_, err := g.RunCommand(ctx, "git", "rev-parse", "--is-inside-work-tree")
	if err != nil {
		return fmt.Errorf("not a git repository: %w", err)
	}
	return nil
}

// EnsureMainBranch ensures the current Git branch is 'main'
func (g *GitOperations) EnsureMainBranch(ctx context.Context) error {
	currentBranch, err := g.RunCommand(ctx, "git", "rev-parse", "--abbrev-ref", "HEAD")
	if err != nil {
		return fmt.Errorf("failed to get current branch: %w", err)
	}

	if currentBranch != "main" {
		g.logger.Info("Switching to main branch", "from", currentBranch)
		err = g.RetryOperation("switch to main branch", func() error {
			_, err := g.RunCommand(ctx, "git", "switch", "main")
			return err
		})
		if err != nil {
			return fmt.Errorf("failed to switch to main branch: %w", err)
		}
	}
	return nil
}

// GetLatestAutoGeneratedCommitDate retrieves the latest commit date with "[AutoGen]" prefix
func (g *GitOperations) GetLatestAutoGeneratedCommitDate(ctx context.Context) (time.Time, error) {
	// Git command to get the latest commit date with the "[AutoGen]" prefix
	command := "git"
	args := []string{"log", "--grep=^\\[AutoGen\\]", "-n", "1", "--format=%ci"}

	output, err := g.RunCommand(ctx, command, args...)
	if err != nil {
		return time.Time{}, fmt.Errorf("failed to retrieve latest auto-generated commit: %w", err)
	}

	// Check if output is empty
	if strings.TrimSpace(output) == "" {
		return time.Time{}, fmt.Errorf("no auto-generated commits found")
	}

	// Parse the commit date
	commitDate, err := time.Parse(dateFormat, output)
	if err != nil {
		return time.Time{}, fmt.Errorf("failed to parse commit date: %w", err)
	}

	return commitDate, nil
}

// CommitChanges stages and commits the changes with a specified date
func (g *GitOperations) CommitChanges(ctx context.Context, commitTime time.Time) error {
	if ctx.Err() != nil {
		return fmt.Errorf("operation cancelled: %w", ctx.Err())
	}

	formattedDate := commitTime.Format(dateFormat)
	commitMsg := GetRandomMessage()

	return g.RetryOperation("commit changes", func() error {
		if _, err := g.RunCommand(ctx, "git", "add", filename); err != nil {
			return fmt.Errorf("git add failed: %w", err)
		}

		// Execute commit with GIT_COMMITTER_DATE set
		cmd := exec.CommandContext(ctx, "git", "commit", "--date", formattedDate, "-m", commitMsg)
		cmd.Env = append(os.Environ(), fmt.Sprintf("GIT_COMMITTER_DATE=%s", formattedDate))
		output, err := cmd.CombinedOutput()
		if err != nil {
			g.logger.Error("Git commit failed", "error", err, "output", string(output))
			return fmt.Errorf("git commit failed: %v, output: %s", err, string(output))
		}

		g.logger.Info("Successfully committed changes",
			"date", formattedDate,
			"message", commitMsg)
		return nil
	})
}

// PushCommits pushes the committed changes to the remote repository
func (g *GitOperations) PushCommits(ctx context.Context) error {
	if ctx.Err() != nil {
		return fmt.Errorf("operation cancelled: %w", ctx.Err())
	}

	return g.RetryOperation("push commits", func() error {
		_, err := g.RunCommand(ctx, "git", "push")
		if err != nil {
			return err
		}
		g.logger.Info("Successfully pushed commits")
		return nil
	})
}

// GetRandomMessage selects a random commit message based on weights
func GetRandomMessage() string {
	return weightedCommitMessages[rand.Intn(len(weightedCommitMessages))]
}

// Logger returns the logger instance
func (g *GitOperations) Logger() *slog.Logger {
	return g.logger
}
