use std::process::Command;
use crate::error::{GitHubGridError, Result};

pub struct GitHubClient {
    username: String,
}

impl GitHubClient {
    pub fn new() -> Result<Self> {
        // Check if gh CLI is available and authenticated
        Self::check_gh_cli()?;
        
        // Get username
        let username = Self::get_github_username()?;
        
        Ok(Self { username })
    }
    
    fn check_gh_cli() -> Result<()> {
        let output = Command::new("gh")
            .args(&["auth", "status"])
            .output();
            
        match output {
            Ok(output) if output.status.success() => Ok(()),
            Ok(_) => Err(GitHubGridError::Authentication(
                "GitHub CLI is not authenticated. Run 'gh auth login' first.".to_string()
            )),
            Err(_) => Err(GitHubGridError::Authentication(
                "GitHub CLI (gh) is not installed. Install it from https://cli.github.com/".to_string()
            )),
        }
    }
    
    fn get_github_username() -> Result<String> {
        let output = Command::new("gh")
            .args(&["api", "user", "--jq", ".login"])
            .output()
            .map_err(|_| GitHubGridError::Authentication("Failed to get GitHub username".to_string()))?;
            
        if !output.status.success() {
            return Err(GitHubGridError::Authentication("Failed to get GitHub username".to_string()));
        }
        
        Ok(String::from_utf8_lossy(&output.stdout).trim().to_string())
    }
    
    pub fn username(&self) -> &str {
        &self.username
    }
    
    pub fn repo_exists(&self, repo_name: &str) -> Result<bool> {
        let output = Command::new("gh")
            .args(&["repo", "view", &format!("{}/{}", self.username, repo_name)])
            .output()
            .map_err(|_| GitHubGridError::Repository("Failed to check if repo exists".to_string()))?;
            
        Ok(output.status.success())
    }
    
    pub fn create_repo(&self, name: &str) -> Result<String> {
        let output = Command::new("gh")
            .args(&[
                "repo", "create", name,
                "--private",
                "--description", "GitHub contribution grid patterns generated by github-grid",
                "--clone=false"
            ])
            .output()
            .map_err(|_| GitHubGridError::Repository("Failed to create repository".to_string()))?;
            
        if !output.status.success() {
            let stderr = String::from_utf8_lossy(&output.stderr);
            return Err(GitHubGridError::Repository(
                format!("Failed to create GitHub repository: {}", stderr)
            ));
        }
        
        Ok(format!("https://github.com/{}/{}.git", self.username, name))
    }
    
    pub fn delete_repo(&self, repo_name: &str) -> Result<()> {
        let output = Command::new("gh")
            .args(&["repo", "delete", &format!("{}/{}", self.username, repo_name), "--yes"])
            .output()
            .map_err(|_| GitHubGridError::Repository("Failed to delete repository".to_string()))?;
            
        if !output.status.success() {
            let stderr = String::from_utf8_lossy(&output.stderr);
            return Err(GitHubGridError::Repository(
                format!("Failed to delete GitHub repository: {}", stderr)
            ));
        }
            
        Ok(())
    }
    
    pub fn clone_url(&self, repo_name: &str) -> String {
        format!("https://github.com/{}/{}.git", self.username, repo_name)
    }
}